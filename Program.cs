using System;
using System.IO;
using System.Collections.Generic;
using Microsoft.Extensions.CommandLineUtils;
using Loggers;
using DeleteTag;

namespace ConsoleApplication
{
    public class Program
    {
        public static void Main(string[] args)
        {
            string pathToRoot;
            string logFile;
            //parsing аргументов командной строки
            var cmd = new CommandLineApplication();
            cmd.Name = "delete-malware";
            cmd.HelpOption("-? | -h | --help");

            cmd.OnExecute(() => 
                {
                    return 0;
                });

            cmd.Command("help",(command) =>
                {
                    command.OnExecute(() =>
                    {
                        Console.WriteLine("This message");
                        return 0;
                    });
                    
                });

            cmd.Command("run", (command) => 
                {
                    command.Description = "Run programm";
                    command.HelpOption("-?|-h|--help");
                    var inputDir = command.Option(
                        "-i|--input <inputdir>",
                        "Path to root directory. Сurrent default directory.",
                        CommandOptionType.SingleValue);
                    var outputLog = command.Option(
                        "-o|--output <outputlog>",
                        "Log file. Current default \"delete-malware.log\"",
                        CommandOptionType.SingleValue);

                    command.OnExecute(() => 
                        {
                            if (inputDir.HasValue())
                                pathToRoot = inputDir.Value();
                            else
                                pathToRoot = Directory.GetCurrentDirectory();

                            if (outputLog.HasValue())
                                logFile = outputLog.Value();
                            else
                                logFile = "./delete-malware.log";

                            return Run(pathToRoot, logFile);
                        });
                });

            cmd.Execute(args);
        }

        private static int Run(string pathToRoot, string logFile)
        {
            Logger logger = new Logger();
            DeleteTagInFiles deleteVirusInHtml = new DeleteTagInFiles();
            
            List<string> Files = new List<string>();
            
            string virus = "//iframe[@src='./1_files/owsfdh4gxyc.html']"; //синтаксис XPath

            deleteVirusInHtml.ToLog += logger.Info; //Событие для лога
            Console.CancelKeyPress += delegate (object sender, ConsoleCancelEventArgs e)    //Событие для выхода
                {
                    deleteVirusInHtml.Stop();
                    e.Cancel = true;
                };

            //выборка файлов из корневого каталога и его подкаталогов   
            Files.AddRange(Directory.EnumerateFiles(pathToRoot, "*.html", SearchOption.AllDirectories));
            Files.AddRange(Directory.EnumerateFiles(pathToRoot, "*.htm", SearchOption.AllDirectories));
            Files.AddRange(Directory.EnumerateFiles(pathToRoot, "*.php", SearchOption.AllDirectories));

            if(Files.Count == 0)
            {
                Console.WriteLine("В директории {0} и её подкаталогов нет файлов с расширением: *.html, *.htm, *.php", pathToRoot);
                return -1;
            }       
            deleteVirusInHtml.SetFiles(Files.ToArray());
            deleteVirusInHtml.SetTagXPath = virus;
            deleteVirusInHtml.Run();
            logger.WriteToLogFile(logFile);

            return 0;
        }
    }
}